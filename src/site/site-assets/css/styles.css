/*****************************************************
 * Compiled from SCSS to CSS using gulp. If you would 
 * like to use gulp to compile the CSS:
 *   1. Make sure you have Node.js installed.
 *   2. From the top folder, run `npm install`.
 *   3. Once it is done installing, run `gulp`.
 * Don't worry if a webpage opens up. Simply save the
 * SCSS file and gulp will upate the CSS file for you.
 *****************************************************/
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
     ========================================================================== */
/**
   * Remove the margin in all browsers.
   */
body {
  margin: 0; }

/**
   * Render the `main` element consistently in IE.
   */
main {
  display: block; }

/**
   * Correct the font size and margin on `h1` elements within `section` and
   * `article` contexts in Chrome, Firefox, and Safari.
   */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
     ========================================================================== */
/**
   * 1. Add the correct box sizing in Firefox.
   * 2. Show the overflow in Edge and IE.
   */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
     ========================================================================== */
/**
   * Remove the gray background on active links in IE 10.
   */
a {
  background-color: transparent; }

/**
   * 1. Remove the bottom border in Chrome 57-
   * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
   */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
   * Add the correct font weight in Chrome, Edge, and Safari.
   */
b,
strong {
  font-weight: bolder; }

/**
   * 1. Correct the inheritance and scaling of font size in all browsers.
   * 2. Correct the odd `em` font sizing in all browsers.
   */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
   * Add the correct font size in all browsers.
   */
small {
  font-size: 80%; }

/**
   * Prevent `sub` and `sup` elements from affecting the line height in
   * all browsers.
   */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
     ========================================================================== */
/**
   * Remove the border on images inside links in IE 10.
   */
img {
  border-style: none; }

/* Forms
     ========================================================================== */
/**
   * 1. Change the font styles in all browsers.
   * 2. Remove the margin in Firefox and Safari.
   */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
   * Show the overflow in IE.
   * 1. Show the overflow in Edge.
   */
button,
input {
  /* 1 */
  overflow: visible; }

/**
   * Remove the inheritance of text transform in Edge, Firefox, and IE.
   * 1. Remove the inheritance of text transform in Firefox.
   */
button,
select {
  /* 1 */
  text-transform: none; }

/**
   * Correct the inability to style clickable types in iOS and Safari.
   */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
   * Remove the inner border and padding in Firefox.
   */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
   * Restore the focus styles unset by the previous rule.
   */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
   * Correct the padding in Firefox.
   */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
   * 1. Correct the text wrapping in Edge and IE.
   * 2. Correct the color inheritance from `fieldset` elements in IE.
   * 3. Remove the padding so developers are not caught out when they zero out
   *    `fieldset` elements in all browsers.
   */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
   * Add the correct vertical alignment in Chrome, Firefox, and Opera.
   */
progress {
  vertical-align: baseline; }

/**
   * Remove the default vertical scrollbar in IE 10+.
   */
textarea {
  overflow: auto; }

/**
   * 1. Add the correct box sizing in IE 10.
   * 2. Remove the padding in IE 10.
   */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
   * Correct the cursor style of increment and decrement buttons in Chrome.
   */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
   * 1. Correct the odd appearance in Chrome and Safari.
   * 2. Correct the outline style in Safari.
   */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
   * Remove the inner padding in Chrome and Safari on macOS.
   */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
   * 1. Correct the inability to style clickable types in iOS and Safari.
   * 2. Change font properties to `inherit` in Safari.
   */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
     ========================================================================== */
/*
   * Add the correct display in Edge, IE 10+, and Firefox.
   */
details {
  display: block; }

/*
   * Add the correct display in all browsers.
   */
summary {
  display: list-item; }

/* Misc
     ========================================================================== */
/**
   * Add the correct display in IE 10+.
   */
template {
  display: none; }

/**
   * Add the correct display in IE 10.
   */
[hidden] {
  display: none; }

body {
  color: #151e37;
  font-family: 'Roboto Slab', sans-serif;
  margin: 0 3em; }
  @media (max-width: 500px) {
    body {
      margin: 2em 1em 0; } }

.wrapper {
  display: table;
  height: 100vh;
  margin: 0 auto; }
  @media (max-width: 500px) {
    .wrapper {
      display: block;
      height: auto; } }

.column {
  display: inline-block;
  display: table-cell;
  vertical-align: middle; }
  .column--left {
    max-width: 30vw;
    min-width: 29em; }
    .column--left {
      font-size: 8px; }
      @media screen and (min-width: 585px) {
        .column--left {
          font-size: calc(8px + 8 * ((100vw - 585px) / 280)); } }
      @media screen and (min-width: 865px) {
        .column--left {
          font-size: 16px; } }
    @media (max-width: 500px) {
      .column--left {
        display: block;
        max-width: unset;
        text-align: center; }
        .column--left {
          font-size: 10px; } }
    @media screen and (max-width: 500px) and (min-width: 320px) {
      .column--left {
        font-size: calc(10px + 5 * ((100vw - 320px) / 180)); } }
    @media screen and (max-width: 500px) and (min-width: 500px) {
      .column--left {
        font-size: 15px; } }
  @media (max-width: 500px) {
    .column--right {
      display: none; } }

.confirmed-check {
  display: none;
  margin-bottom: 2em;
  width: 30%; }
  @media (max-width: 500px) {
    .confirmed-check {
      display: inline; } }

.callout {
  margin: 0 0 1.5em;
  font-size: 2.25em; }
  @media (max-width: 500px) {
    .callout {
      margin: 0 0 0.5em; } }
  .callout__divider {
    background-color: #151e37;
    display: none;
    height: .313em;
    margin: 0 auto 3.5em;
    width: 90%; }
    @media (max-width: 500px) {
      .callout__divider {
        display: block; } }

@media (max-width: 500px) {
  .confirm-message__wrapper {
    margin: auto;
    width: 80%; } }

.confirm-message__text {
  font-size: 1.3em; }

.form {
  white-space: nowrap; }

.input {
  background-color: transparent;
  border-width: 0;
  border-bottom: 2px solid #b5b5b5;
  color: #151e37;
  font-size: 1.75em;
  margin-bottom: 0.75em;
  -webkit-transition: border-bottom-color 0.2s ease-in-out;
  transition: border-bottom-color 0.2s ease-in-out;
  width: 8.4em; }
  @media (max-width: 500px) {
    .input {
      margin-bottom: 2em; } }
  .input:focus {
    outline-width: 0;
    border-bottom-color: #151e37; }
  .input::-webkit-input-placeholder {
    color: #b5b5b5; }
  .input:-ms-input-placeholder {
    color: #b5b5b5; }
  .input::-ms-input-placeholder {
    color: #b5b5b5; }
  .input::placeholder {
    color: #b5b5b5; }
  .input--select {
    width: unset; }
  @media (max-width: 500px) {
    .input--full-width {
      width: 91%; } }

.submit {
  background-color: #058fff;
  border-radius: 6px;
  border-width: 0;
  color: #ffffff;
  cursor: pointer;
  font-size: 1.75em;
  margin-top: 0.5em;
  padding: 0.4em 0.6em; }
  .submit:hover {
    background-color: #57b3ff; }

.username-posttext {
  font-size: 1.75em; }

.credits {
  margin-top: 6em; }
  @media (max-width: 500px) {
    .credits {
      margin-bottom: 3em; } }

.credit {
  margin: 0 0 0.25em; }

.image {
  max-height: 95vh;
  width: 40vw; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
